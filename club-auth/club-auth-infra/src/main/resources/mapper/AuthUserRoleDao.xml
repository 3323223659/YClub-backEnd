<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.club.auth.infra.basic.mapper.AuthUserRoleDao">

    <resultMap type="com.club.auth.infra.basic.entity.AuthUserRole" id="AuthUserRoleMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="userId" column="user_id" jdbcType="INTEGER"/>
        <result property="roleId" column="role_id" jdbcType="INTEGER"/>
        <result property="createdBy" column="created_by" jdbcType="VARCHAR"/>
        <result property="createdTime" column="created_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="VARCHAR"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="isDeleted" column="is_deleted" jdbcType="INTEGER"/>
    </resultMap>

    <!-- 查询单个 -->
    <select id="queryById" resultMap="AuthUserRoleMap">
        SELECT
            id, user_id, role_id, created_by,
            created_time, update_by, update_time, is_deleted
        FROM auth_user_role
        WHERE id = #{id}
    </select>

    <!-- 查询指定行数据 -->
    <select id="queryAllByLimit" resultMap="AuthUserRoleMap">
        SELECT
        id, user_id, role_id, created_by,
        created_time, update_by, update_time, is_deleted
        FROM auth_user_role
        <where>
            <if test="id != null">
                AND id = #{id}
            </if>
            <if test="userId != null">
                AND user_id = #{userId}
            </if>
            <if test="roleId != null">
                AND role_id = #{roleId}
            </if>
            <if test="createdBy != null and createdBy != ''">
                AND created_by = #{createdBy}
            </if>
            <if test="createdTime != null">
                AND created_time = #{createdTime}
            </if>
            <if test="updateBy != null and updateBy != ''">
                AND update_by = #{updateBy}
            </if>
            <if test="updateTime != null">
                AND update_time = #{updateTime}
            </if>
            <if test="isDeleted != null">
                AND is_deleted = #{isDeleted}
            </if>
        </where>
        LIMIT #{pageable.offset}, #{pageable.pageSize}
    </select>

    <!-- 统计总行数 -->
    <select id="count" resultType="java.lang.Long">
        SELECT COUNT(1)
        FROM auth_user_role
        <where>
            <if test="id != null">
                AND id = #{id}
            </if>
            <if test="userId != null">
                AND user_id = #{userId}
            </if>
            <if test="roleId != null">
                AND role_id = #{roleId}
            </if>
            <if test="createdBy != null and createdBy != ''">
                AND created_by = #{createdBy}
            </if>
            <if test="createdTime != null">
                AND created_time = #{createdTime}
            </if>
            <if test="updateBy != null and updateBy != ''">
                AND update_by = #{updateBy}
            </if>
            <if test="updateTime != null">
                AND update_time = #{updateTime}
            </if>
            <if test="isDeleted != null">
                AND is_deleted = #{isDeleted}
            </if>
        </where>
    </select>

    <!-- 新增所有列 -->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO auth_user_role(
            user_id, role_id, created_by,
            created_time, update_by, update_time, is_deleted
        ) VALUES (
                     #{userId}, #{roleId}, #{createdBy},
                     #{createdTime}, #{updateBy}, #{updateTime}, #{isDeleted}
                 )
    </insert>

    <!-- 批量新增 -->
    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO auth_user_role(
        user_id, role_id, created_by,
        created_time, update_by, update_time, is_deleted
        ) VALUES
        <foreach collection="entities" item="entity" separator=",">
            (
            #{entity.userId}, #{entity.roleId}, #{entity.createdBy},
            #{entity.createdTime}, #{entity.updateBy}, #{entity.updateTime}, #{entity.isDeleted}
            )
        </foreach>
    </insert>

    <!-- 批量插入或更新 -->
    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO auth_user_role(
        user_id, role_id, created_by,
        created_time, update_by, update_time, is_deleted
        ) VALUES
        <foreach collection="entities" item="entity" separator=",">
            (
            #{entity.userId}, #{entity.roleId}, #{entity.createdBy},
            #{entity.createdTime}, #{entity.updateBy}, #{entity.updateTime}, #{entity.isDeleted}
            )
        </foreach>
        ON DUPLICATE KEY UPDATE
        user_id = VALUES(user_id),
        role_id = VALUES(role_id),
        created_by = VALUES(created_by),
        created_time = VALUES(created_time),
        update_by = VALUES(update_by),
        update_time = VALUES(update_time),
        is_deleted = VALUES(is_deleted)
    </insert>

    <!-- 通过主键修改数据 -->
    <update id="update">
        UPDATE auth_user_role
        <set>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="roleId != null">
                role_id = #{roleId},
            </if>
            <if test="createdBy != null and createdBy != ''">
                created_by = #{createdBy},
            </if>
            <if test="createdTime != null">
                created_time = #{createdTime},
            </if>
            <if test="updateBy != null and updateBy != ''">
                update_by = #{updateBy},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted},
            </if>
        </set>
        WHERE id = #{id}
    </update>

    <!-- 通过主键删除 -->
    <delete id="deleteById">
        DELETE FROM auth_user_role WHERE id = #{id}
    </delete>

</mapper>